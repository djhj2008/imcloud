================================================================

    API manual of PLE library  

          ver.1.0.0.0  on 2012.07.27.[Fri] written by T.SHIUBYA
          ver.1.1.0.0  on 2012.09.27.[Thu] changed by T.SHIBUYA
          ver.1.2.0.0  on 2013.01.24.[Thu] changed by T.SHIBUYA
          ver.2.0.0.0  on 2013.05.17.[Fri] changed by T.SHIBUYA
          ver.3.0.0.0  on 2013.06.26.[Wed] changed by T.SHIBUYA
          ver.4.0.0.0  on 2015.05.05.[Thu]
================================================================
----------------------------------------------------------------
This document is CONFIDENTIAL. Any unauthorized use is strictly
prohibited.
----------------------------------------------------------------

----------------------------------------------------------------
1. Introduction
----------------------------------------------------------------
 This manual simply explains APIs of PLE library which is used
for encoding waveforms of voltage and current.

----------------------------------------------------------------
2. About PLE library
----------------------------------------------------------------
 PLE library is written following ANCSI C (C-99).
 PLE library is provided as below.

  + header files
  + static library itself

Special function and sub libraries are not used.

----------------------------------------------------------------
3. Overview of PLE library
----------------------------------------------------------------
 PLE library consists of the following functions.

    1. Initialize and Finalize functions
       PLEInitialize(), PLEFinalize(), PLEPreProcess(), 
       PLEPostProcess()
    2. Encoding process functions
       PLEPutData(), PLENotifyDataFinish(), PLEGetResultSize(),
       PLEGetResult()
    3. Utility functions
       PLEGetVersion(), PLEGetStructSize(),
       PLEGetResultSizeMax()

refer to sample program (sample.c)

----------------------------------------------------------------
4. Encoding flow
----------------------------------------------------------------

  PLEInitialize()         : Initialize module
  PLEPreProcess()         : Set internal parameters
  while(1) {
    PLEPutData()          : Sequentially input current and voltage data．
    while(1) {
      PLEGetResultSize()  : Receive encoded data size．
                              if return == 0 then no encoded data
                              if return == 1 then encoded data exist.
      PLEGetResult()      : Pull encoded data.
                              if return == 0 then no encoded data
                              if return == 1 then encoded data exist.
    }
  }
  PLEFinalize()           : Release module


----------------------------------------------------------------
5. API functions
----------------------------------------------------------------
----------------------------------------------------------------
 ple_code_t
 PLEInitialize(HPLE *phPle, ple_void_t *pMem,
               const ple_size_t nMemSize);
----------------------------------------------------------------
Func: 
  Generate handle of PLE module and allocate memory and initialize.

Args:
  HPLE *phPle <-> Handle of PLE module
                  *phPle MUST be NULL on calling.
                  *phPle has handle pointer on return.
                  
  ple_void_t *pMem  <-> reserved (should be NULL)
  const ple_size_t nMemSize  -> reserved (should be NULL)

Return:
  0        : Success
  Negative : Error

----------------------------------------------------------------
 ple_code_t
 PLEFinalize(HPLE *phPle);
----------------------------------------------------------------
Func: 
  Release PLE module

Args:
  HPLE *phPle <-> Handle of PLE module
                  *phPle has NULL on return.
Return:
  0        : Only

Note: 
  As there is no effect on calling with *phPle == NULL,
  it is safe even if multiple call has occurred.


----------------------------------------------------------------
 ple_code_t
 PLEPreProcess(HPLE hPle, 
               const ple_uint8_t ucFundamentalFrq,
               const ple_uint8_t ucCurrentChannels,
               const ple_uint8_t ucVoltageChannels,
               const ple_uint8_t ucSamplesPerFrame,
               const ple_uint8_t ucFramesPerGroup);
----------------------------------------------------------------
Func: 
  Set internal parameters of PLE module.

Args:
  HPLE hPle <-> Handle of PLE module
  const ple_uint8_t ucFundamentalFrq ->
        Frequency of AC line.
        If 50Hz then set 50, else if 60Hz then set 60.

  const ple_uint8_t ucCurrentChannels ->
        number of current channel.
        minimum number of channel is 1.

  const ple_uint8_t ucVoltageChannels ->
        number of voltage channel.
        minimum number of channel is 1.

  const ple_uint8_t ucSamplesPerFrame ->
        number of samples for single waveform.
        it must be ether 32, 64, 128.

  const ple_uint8_t ucFramesPerGroup ->
        number of input waveforms.
        maximum number is 255 (PLC_FRAMES_PER_GROUP_MAX)
        (refer to plchead.h)．

Return:
  0        : Success
  Negative : Error


----------------------------------------------------------------
 ple_code_t
 PLEPostProcess(HPLE hPle);
----------------------------------------------------------------
Func: 
  Clear internal parameters.

Args:
  HPLE hPle [io] <-> Handle of PLE module

Return:
  0        : Only


----------------------------------------------------------------
 ple_code_t
 PLEPutData(HPLE hPle, 
            const ple_uint16_t **ppusWave);
----------------------------------------------------------------
Func: 
  Put input waveform data into module.
  Set ppusWave the pointer to pointer array of data array of 
  single current and voltage waveform.
  the order of pointer is pointers of current waveforms first.

Args:
  HPLE hPle [io] : Handle of PLE module
  const ple_uint16_t **ppusWave ->
        Address of pointer array to input waveform data.
        For each sample value, 
        14 bit unsigned integer value must be stored rightward 
        in the lower bit direction in the 16-bit unsigned integer 
        ple_int16_t type variable.

Return:
  0        : Success
  Negative : Error


----------------------------------------------------------------
 ple_code_t
 PLEGetResultSize(HPLE hPle, plc_size_t *pnItemSize);
----------------------------------------------------------------
Func: 
  The size (number of bytes) of encoded data is obtained for 
  data input by the above PLEPutData() and PLENotifyDataFinish().
  if return value is 1, there are encoded data in internal memory and
  the size of encoded data is stored in *pnItemSize.
  if return value is 0, there is no encoded data.

Args:
  HPLE hPle       <-> Handle of PLE module
  plc_size_t *pnItemSize <-
        valuable for storing size of encoded data.
        maximum data size is 16336(PLC_ITEM_SIZE_MAX) bytes.
        (refer to plchead.h)

Return:
  1        : Sucesss, encoded data exist
  0        : Success, no encoded data exist
  Negative : Error

Note:
  size of encoded data storing in *pnItemSize will not be more than
  return value of PLEGetResultSizeMax().


----------------------------------------------------------------
 ple_code_t
 PLEGetResult(HPLE hPle, plc_uint8_t *pucItem);
----------------------------------------------------------------
Func: 
  Encoded data is acquired for data input by the above PLEPutData() 
  and PLENotifyDataFinish().
  if return value is 1, there are encoded data in internal memory and
  the pointer of encoded data is stored in pucItem.
  if return value is 0, there is no encoded data.

Args:
  HPLE hPle            <-> Handle of PLE module
  plc_uint8_t *pucItem <-  pointer to data array for encoded data

Return:
  1        : Sucesss, encoded data exist
  0        : Success, no encoded data exist
  Negative : Error

Note:
  To get size of encoded data storing in pucItem,
  need to call PLEGetResultSize() right before this function.


----------------------------------------------------------------
 ple_code_t
 PLEGetVersion(ple_uint8_t *pszVersionString,
               const ple_size_t nSize);
----------------------------------------------------------------
Func: 
  Get library version  

Args:
  ple_uint8_t *pszVersionString <- version string
  const ple_size_t nSize        -> size of data array for version string

Return:
  0        : Success
  Negative : Error

Note: 
  It can be called without PLEInitialize() or PLEPreProcess().


----------------------------------------------------------------
 ple_size_t
 PLEGetStructSize(const ple_uint8_t ucCurrentChannels,
                  const ple_uint8_t ucVoltageChannels,
                  const ple_uint8_t ucFramesPerGroup);
----------------------------------------------------------------
Func: 
  Get internal memory size of the library.

Args:
  const ple_uint8_t ucCurrentChannels ->
        number of current data channel.
  const ple_uint8_t ucVoltageChannels ->
        number of voltage data channel.
  const ple_uint8_t ucFramesPerGroup ->
        number of input waveform to be encoded.

Return:
  size of internal memory in bytes.

Note: 
  It can be called without PLEInitialize() or PLEPreProcess().
  Return value means size of heap area required by this library.
  This value is changed by ucCurrentChannels, ucVoltageChannels
  and ucFramesPerGroup. If either ucCurrentChannels, ucVoltageChannels 
  or ucFramesPerGroup is invalid, return 0.


----------------------------------------------------------------
 plc_size_t
 PLEGetResultSizeMax(const ple_uint8_t ucCurrentChannels,
                     const ple_uint8_t ucVoltageChannels,
                     const ple_uint8_t ucFramesPerGroup);
----------------------------------------------------------------
Func: 
  Get maximum size of encoded data which is determined by
  ucChannels and ucFramesPerGroup in bytes.

Args:
  const ple_uint8_t ucCurrentChannels ->
        number of current channel.
  const ple_uint8_t ucVoltageChannels ->
        number of voltage channel.
  const ple_uint8_t ucFramesPerGroup ->
        number of input waveform to be encoded.

Return:
  Maximum size of encoded data in bytes.

Note: 
  It can be called without PLEInitialize() or PLEPreProcess().
  If either ucCurrentChannels, ucVoltageChannels 
  or ucFramesPerGroup is invalid, return 0.


----------------------------------------------------------------

----------------------------------------------------------------
               End of File: SONY Confidential
----------------------------------------------------------------
